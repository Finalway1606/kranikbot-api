import sqlite3
import threading
import hashlib
import json
from datetime import datetime, timedelta
from database import UserDatabase
from discord_integration import DiscordIntegration

class Shop:
    def __init__(self, db: UserDatabase):
        self.db = db
        self.lock = threading.Lock()
        self.db_path = "shop.db"
        self.discord = DiscordIntegration()
        
        # System monitorowania zmian
        self.last_shop_hash = None
        self.shop_channel_id = 1401909828510679112  # ID kana≈Çu do aktualizacji sklepu
        self.last_shop_message_id = None
        
        # Dostƒôpne nagrody w sklepie
        self.rewards = {
            "vip_hour": {
                "name": "VIP na godzinƒô",
                "price": 800,
                "description": "Status VIP na 1 godzinƒô",
                "duration_hours": 1
            },
            "stream_title": {
                "name": "Zmiana tytu≈Çu streama",
                "price": 1000,
                "description": "Zmiana tytu≈Çu streama na 30 minut",
                "duration_hours": 0.5
            },
            "discord_role": {
                "name": "Rola VIP Discord",
                "price": 800,
                "description": "Rola VIP na Discordzie na tydzie≈Ñ",
                "duration_hours": 168  # 7 dni
            },
            "stream_game": {
                "name": "Wyb√≥r gry na stream",
                "price": 2000,
                "description": "Wyb√≥r gry na ca≈Çy stream",
                "duration_hours": 4  # ≈öredni czas streama
            },
            "challenge": {
                "name": "Challenge dla streamera",
                "price": 1500,
                "description": "Wymy≈õlenie wyzwania do wykonania w grze",
                "duration_hours": 0.5  # 30 minut na wykonanie
            },
            "dedication": {
                "name": "Dedykacja na streamie",
                "price": 800,
                "description": "Osobista dedykacja/pozdrowienia na ≈ºywo",
                "duration_hours": 0.1  # 6 minut na realizacjƒô
            },
            "sing_song": {
                "name": "≈öpiewanie piosenki",
                "price": 1100,
                "description": "Za≈õpiewanie wybranej piosenki na streamie",
                "duration_hours": 0.033  # 2 minuty na realizacjƒô
            },
            "custom_command": {
                "name": "W≈Çasna komenda",
                "price": 3500,
                "description": "Stworzenie w≈Çasnej komendy bota na tydzie≈Ñ",
                "duration_hours": 168  # 7 dni
            }
        }
        
        self.init_shop_database()
    
    def get_connection(self):
        """Tworzy nowe po≈ÇƒÖczenie z bazƒÖ danych sklepu"""
        conn = sqlite3.connect(self.db_path, timeout=10.0)
        conn.execute('PRAGMA journal_mode=WAL')
        return conn
    
    def init_shop_database(self):
        """Inicjalizuje bazƒô danych sklepu"""
        with self.lock:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS purchases (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        username TEXT NOT NULL,
                        reward_id TEXT NOT NULL,
                        purchase_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        expires_at TIMESTAMP,
                        is_active BOOLEAN DEFAULT 1,
                        used BOOLEAN DEFAULT 0
                    )
                ''')
                
                conn.commit()
    
    def get_shop_list(self):
        """Zwraca listƒô dostƒôpnych nagr√≥d"""
        shop_text = "üõí SKLEP NAGR√ìD: "
        for reward_id, reward in self.rewards.items():
            shop_text += f"| {reward['name']}: {reward['price']} pkt "
        
        return shop_text + "| U≈ºyj: !kup <nagroda>"
    
    def buy_reward(self, username, reward_id):
        """Kupuje nagrodƒô za punkty"""
        
        if reward_id not in self.rewards:
            available = ", ".join(self.rewards.keys())
            return f"‚ùå @{username}, nieznana nagroda! Dostƒôpne: {available}"
        
        reward = self.rewards[reward_id]
        
        # Specjalne uprawnienia dla w≈Ça≈õciciela bota
        is_owner = username.lower() == "kranik1606"
        
        # Sprawd≈∫ czy u≈ºytkownik ju≈º ma aktywnƒÖ nagrodƒô tego typu (tylko dla zwyk≈Çych u≈ºytkownik√≥w)
        if not is_owner and self.has_active_reward(username, reward_id):
            return f"‚ùå @{username}, ju≈º masz aktywnƒÖ nagrodƒô: {reward['name']}!"
        
        if not is_owner:
            # Sprawd≈∫ punkty tylko dla zwyk≈Çych u≈ºytkownik√≥w
            user = self.db.get_user(username)
            current_points = user[1]
            
            if current_points < reward['price']:
                return f"‚ùå @{username}, potrzebujesz {reward['price']} punkt√≥w! Masz tylko {current_points}."
            
            # Odejmij punkty tylko zwyk≈Çym u≈ºytkownikom
            self.db.remove_points(username, reward['price'])
        
        # Dodaj nagrodƒô do inwentarza
        expires_at = datetime.now() + timedelta(hours=reward['duration_hours'])
        
        with self.lock:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO purchases (username, reward_id, expires_at)
                    VALUES (?, ?, ?)
                ''', (username, reward_id, expires_at.isoformat()))
                conn.commit()
        
        # Format czasu zale≈ºny od d≈Çugo≈õci trwania nagrody
        if reward['duration_hours'] >= 24:
            time_format = expires_at.strftime('%d.%m %H:%M')  # Data i godzina dla nagr√≥d 24h+
        else:
            time_format = expires_at.strftime('%H:%M')  # Tylko godzina dla kr√≥tkich nagr√≥d
        
        # Automatyczne nadawanie roli Discord - dzia≈Ça dla wszystkich
        if reward_id == 'discord_role':
            print(f"üé≠ Pr√≥ba automatycznego nadania roli Discord dla {username}")
            self.discord.assign_role_async(username, reward['duration_hours'])
        
        # Powiadomienie Discord o zakupie nagrody (tylko dla zwyk≈Çych u≈ºytkownik√≥w)
        if not is_owner:
            self.discord.notify_reward_purchase(
                username, 
                reward['name'], 
                reward['price'], 
                reward['duration_hours']
            )
            
            # Je≈õli nagroda wymaga rƒôcznej akcji (opr√≥cz discord_role), popro≈õ moderator√≥w
        if reward_id in ['vip_hour', 'stream_title', 'stream_game', 'challenge', 'dedication', 'sing_song', 'custom_command']:
            action_details = self._get_action_details(reward_id, reward)
            action_type = reward_id.split('_')[0] if '_' in reward_id else reward_id
            self.discord.request_manual_action(
                action_type,
                username,
                action_details
            )
        
        if is_owner:
            return f"üëë @{username} (W≈ÅA≈öCICIEL) otrzyma≈Ç: {reward['name']} ZA DARMO! Aktywne do: {time_format}"
        else:
            return f"üéÅ @{username} kupi≈Ç: {reward['name']} za {reward['price']} punkt√≥w! Aktywne do: {time_format}"
    
    def has_active_reward(self, username, reward_id):
        """Sprawdza czy u≈ºytkownik ma aktywnƒÖ nagrodƒô"""
        with self.lock:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT COUNT(*) FROM purchases 
                    WHERE username = ? AND reward_id = ? 
                    AND is_active = 1 AND expires_at > ?
                ''', (username, reward_id, datetime.now().isoformat()))
                
                count = cursor.fetchone()[0]
                return count > 0
    
    def get_user_inventory(self, username):
        """Pobiera inwentarz u≈ºytkownika"""
        with self.lock:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT reward_id, expires_at, used FROM purchases 
                    WHERE username = ? AND is_active = 1 AND expires_at > ?
                    ORDER BY expires_at ASC
                ''', (username, datetime.now().isoformat()))
                
                active_rewards = cursor.fetchall()
        
        if not active_rewards:
            return f"üì¶ @{username}, tw√≥j inwentarz jest pusty!"
        
        # Skr√≥cona wersja aby nie przekroczyƒá limitu IRC (512 bajt√≥w)
        inventory_text = f"üì¶ @{username}: "
        for reward_id, expires_at, used in active_rewards:
            reward_name = self.rewards[reward_id]['name']
            reward_duration = self.rewards[reward_id]['duration_hours']
            expires_datetime = datetime.fromisoformat(expires_at)
            
            # Skr√≥cony format czasu
            if reward_duration >= 24:
                expires_time = expires_datetime.strftime('%d.%m %H:%M')
            else:
                expires_time = expires_datetime.strftime('%H:%M')
            
            # Skr√≥cone nazwy nagr√≥d
            short_names = {
                'VIP na godzinƒô': 'VIP',
                'Zmiana tytu≈Çu streama': 'Tytu≈Ç',
                'Rola VIP Discord': 'Discord',
                'Wyb√≥r gry na stream': 'Gra',
                'Challenge dla streamera': 'Challenge',
                'Dedykacja na streamie': 'Dedykacja',
                '≈öpiewanie piosenki': 'Piosenka',
                'W≈Çasna komenda': 'Komenda'
            }
            short_name = short_names.get(reward_name, reward_name[:8])
            
            status = "‚úÖ" if not used else "üîÑ"
            inventory_text += f"{status}{short_name}({expires_time}) "
            
            # Sprawd≈∫ d≈Çugo≈õƒá wiadomo≈õci (bezpieczny limit ~400 znak√≥w)
            if len(inventory_text) > 400:
                inventory_text += "..."
                break
        
        return inventory_text
    
    def cleanup_expired_rewards(self):
        """Usuwa wygas≈Çe nagrody"""
        with self.lock:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    UPDATE purchases 
                    SET is_active = 0 
                    WHERE expires_at <= ? AND is_active = 1
                ''', (datetime.now().isoformat(),))
                conn.commit()
    
    def use_reward(self, username, reward_id):
        """Oznacza nagrodƒô jako u≈ºytƒÖ"""
        with self.lock:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    UPDATE purchases 
                    SET used = 1 
                    WHERE username = ? AND reward_id = ? AND is_active = 1 AND expires_at > ?
                ''', (username, reward_id, datetime.now().isoformat()))
                conn.commit()
                
                return cursor.rowcount > 0
    
    def remove_reward(self, target_username, reward_id):
        """Zabiera nagrodƒô u≈ºytkownikowi (tylko dla moderator√≥w/w≈Ça≈õciciela)"""
        if reward_id not in self.rewards:
            available = ", ".join(self.rewards.keys())
            return f"‚ùå Nieznana nagroda! Dostƒôpne: {available}"
        
        reward = self.rewards[reward_id]
        
        # Sprawd≈∫ czy u≈ºytkownik ma aktywnƒÖ nagrodƒô tego typu
        if not self.has_active_reward(target_username, reward_id):
            return f"‚ùå @{target_username} nie ma aktywnej nagrody: {reward['name']}"
        
        # Usu≈Ñ nagrodƒô z inwentarza
        with self.lock:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    UPDATE purchases 
                    SET is_active = 0 
                    WHERE username = ? AND reward_id = ? AND is_active = 1 AND expires_at > ?
                ''', (target_username, reward_id, datetime.now().isoformat()))
                conn.commit()
                
                if cursor.rowcount > 0:
                    return f"üóëÔ∏è Zabrano nagrodƒô: {reward['name']} u≈ºytkownikowi @{target_username}"
                else:
                    return f"‚ùå Nie uda≈Ço siƒô zabraƒá nagrody @{target_username}"
    
    def give_reward_as_owner(self, target_username, reward_id):
        """Daje nagrodƒô u≈ºytkownikowi jako w≈Ça≈õciciel (za darmo)"""
        if reward_id not in self.rewards:
            available = ", ".join(self.rewards.keys())
            return f"‚ùå Nieznana nagroda! Dostƒôpne: {available}"
        
        reward = self.rewards[reward_id]
        
        # Sprawd≈∫ czy u≈ºytkownik ju≈º ma aktywnƒÖ nagrodƒô tego typu
        if self.has_active_reward(target_username, reward_id):
            return f"‚ùå @{target_username} ju≈º ma aktywnƒÖ nagrodƒô: {reward['name']}!"
        
        # Dodaj nagrodƒô do inwentarza (bez odejmowania punkt√≥w)
        expires_at = datetime.now() + timedelta(hours=reward['duration_hours'])
        
        with self.lock:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO purchases (username, reward_id, expires_at)
                    VALUES (?, ?, ?)
                ''', (target_username, reward_id, expires_at.isoformat()))
                conn.commit()
        
        # Format czasu zale≈ºny od d≈Çugo≈õci trwania nagrody
        if reward['duration_hours'] >= 24:
            time_format = expires_at.strftime('%d.%m %H:%M')  # Data i godzina dla nagr√≥d 24h+
        else:
            time_format = expires_at.strftime('%H:%M')  # Tylko godzina dla kr√≥tkich nagr√≥d
        
        # Automatyczne nadawanie roli Discord
        if reward_id == 'discord_role':
            print(f"üé≠ Pr√≥ba automatycznego nadania roli Discord dla {target_username}")
            self.discord.assign_role_async(target_username, reward['duration_hours'])
        
        # Powiadomienie Discord o darowanej nagrodzie
        self.discord.notify_reward_purchase(
            target_username, 
            reward['name'], 
            0,  # Cena 0 - za darmo
            reward['duration_hours']
        )
        
        # Je≈õli nagroda wymaga rƒôcznej akcji (opr√≥cz discord_role), popro≈õ moderator√≥w
        if reward_id in ['vip_hour', 'stream_title', 'stream_game', 'challenge', 'dedication', 'sing_song', 'custom_command']:
            action_details = self._get_action_details(reward_id, reward)
            action_type = reward_id.split('_')[0] if '_' in reward_id else reward_id
            self.discord.request_manual_action(
                action_type,
                target_username,
                action_details
            )
        
        return f"üéÅüëë @{target_username} otrzyma≈Ç od w≈Ça≈õciciela: {reward['name']} ZA DARMO! Aktywne do: {time_format}"

    def reset_all_rewards(self):
        """Usuwa wszystkie aktywne nagrody wszystkich u≈ºytkownik√≥w (tylko dla w≈Ça≈õciciela)"""
        with self.lock:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                # Dezaktywuj wszystkie aktywne nagrody
                cursor.execute('''
                    UPDATE purchases 
                    SET is_active = 0 
                    WHERE is_active = 1
                ''')
                affected_rows = cursor.rowcount
                conn.commit()
                
                return affected_rows

    def _get_action_details(self, reward_id, reward):
        """Zwraca szczeg√≥≈Çy akcji wymaganej dla danej nagrody"""
        details_map = {
            'vip_hour': f"Nadaj VIP na Twitchu na {reward['duration_hours']} godzin",
            'stream_title': f"Zmie≈Ñ tytu≈Ç streama na {reward['duration_hours']} godzin (u≈ºytkownik poda nowy tytu≈Ç)",
            'discord_role': f"Nadaj specjalnƒÖ rolƒô Discord na {reward['duration_hours']} godzin",
            'stream_game': f"Pozw√≥l wybraƒá grƒô na stream na {reward['duration_hours']} godzin",
            'challenge': f"Wykonaj wyzwanie wymy≈õlone przez u≈ºytkownika w grze (czas: {int(reward['duration_hours']*60)} minut)",
            'dedication': f"Przeka≈º dedykacjƒô/pozdrowienia od u≈ºytkownika na ≈ºywo (czas: {int(reward['duration_hours']*60)} minut)",
            'sing_song': f"Za≈õpiewaj piosenkƒô wybranƒÖ przez u≈ºytkownika (czas: {int(reward['duration_hours']*60)} minut)",
            'custom_command': f"Stw√≥rz w≈ÇasnƒÖ komendƒô dla u≈ºytkownika na {int(reward['duration_hours']/24)} dni"
        }
        return details_map.get(reward_id, f"Realizuj nagrodƒô: {reward['name']}")

    def get_shop_hash(self):
        """Generuje hash aktualnego stanu sklepu"""
        shop_data = json.dumps(self.rewards, sort_keys=True)
        return hashlib.md5(shop_data.encode()).hexdigest()

    def check_shop_changes(self):
        """Sprawdza czy sklep siƒô zmieni≈Ç od ostatniego sprawdzenia"""
        current_hash = self.get_shop_hash()
        
        if self.last_shop_hash is None:
            self.last_shop_hash = current_hash
            return False  # Pierwsza inicjalizacja - nie wysy≈Çaj wiadomo≈õci
        
        if current_hash != self.last_shop_hash:
            self.last_shop_hash = current_hash
            return True  # Sklep siƒô zmieni≈Ç
        
        return False  # Brak zmian
    
    def initialize_shop_hash(self):
        """Inicjalizuje hash sklepu bez wysy≈Çania wiadomo≈õci na Discord"""
        current_hash = self.get_shop_hash()
        if current_hash is not None:
            self.last_shop_hash = current_hash
            print("‚ÑπÔ∏è Zainicjalizowano hash sklepu bez wysy≈Çania wiadomo≈õci")

    def generate_shop_embed_data(self):
        """Generuje dane dla embed Discord z aktualnym sklepem"""
        embed_data = {
            "title": "üõí SKLEP NAGR√ìD",
            "description": "Kup nagrody za punkty aktywno≈õci!",
            "color": 0x00ff00,  # Zielony kolor
            "fields": [],
            "footer": {
                "text": f"Ostatnia aktualizacja: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            }
        }
        
        # Dodaj ka≈ºdƒÖ nagrodƒô jako osobne pole
        for reward_id, reward in self.rewards.items():
            duration_text = ""
            if reward['duration_hours'] >= 24:
                days = int(reward['duration_hours'] / 24)
                duration_text = f" ({days} dni)" if days > 1 else " (1 dzie≈Ñ)"
            elif reward['duration_hours'] >= 1:
                hours = int(reward['duration_hours'])
                duration_text = f" ({hours}h)" if hours > 1 else " (1h)"
            else:
                minutes = int(reward['duration_hours'] * 60)
                duration_text = f" ({minutes} min)"
            
            field_data = {
                "name": f"üíé {reward['name']} - {reward['price']} pkt",
                "value": f"{reward['description']}{duration_text}\n`!kup {reward_id}`",
                "inline": True
            }
            embed_data["fields"].append(field_data)
        
        # Dodaj instrukcje
        embed_data["fields"].append({
            "name": "üìã Jak kupowaƒá?",
            "value": "U≈ºyj komendy `!kup <id_nagrody>` na czacie Twitch\nSprawd≈∫ swoje punkty: `!punkty`\nSprawd≈∫ inwentarz: `!inwentarz`",
            "inline": False
        })
        
        return embed_data

    def update_shop_post_if_changed(self):
        """Aktualizuje post ze sklepem na Discord tylko je≈õli co≈õ siƒô zmieni≈Ço"""
        if self.check_shop_changes():
            print("üîÑ Wykryto zmiany w sklepie - aktualizujƒô post na Discord...")
            embed_data = self.generate_shop_embed_data()
            
            # Wy≈õlij aktualizacjƒô przez Discord integration (asynchronicznie)
            try:
                self.discord.update_shop_post_async(
                    channel_id=self.shop_channel_id,
                    embed_data=embed_data,
                    message_id=self.last_shop_message_id
                )
                print("‚úÖ Rozpoczƒôto aktualizacjƒô postu ze sklepem na Discord")
            except Exception as e:
                print(f"‚ùå B≈ÇƒÖd podczas aktualizacji postu ze sklepem: {e}")
        else:
            print("‚ÑπÔ∏è Brak zmian w sklepie - nie aktualizujƒô postu")

    def force_update_shop_post(self):
        """Wymusza aktualizacjƒô postu ze sklepem na Discord"""
        print("üîÑ Wymuszam aktualizacjƒô postu ze sklepem na Discord...")
        embed_data = self.generate_shop_embed_data()
        
        try:
            # Uruchom asynchronicznie
            self.discord.update_shop_post_async(
                channel_id=self.shop_channel_id,
                embed_data=embed_data,
                message_id=None  # Wy≈õlij nowƒÖ wiadomo≈õƒá
            )
            self.last_shop_hash = self.get_shop_hash()  # Zaktualizuj hash
            print("‚úÖ Rozpoczƒôto wysy≈Çanie postu ze sklepem na Discord")
            return True
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd podczas wysy≈Çania postu ze sklepem: {e}")
            return False